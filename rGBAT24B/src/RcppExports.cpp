// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// HR
std::string HR();
RcppExport SEXP _rGBAT24B_HR() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(HR());
    return rcpp_result_gen;
END_RCPP
}
// GBAT_1
DataFrame GBAT_1(DataFrame x, std::string id_col, std::string add_col, std::string third_col, std::string third_col_type, std::string unit_col);
RcppExport SEXP _rGBAT24B_GBAT_1(SEXP xSEXP, SEXP id_colSEXP, SEXP add_colSEXP, SEXP third_colSEXP, SEXP third_col_typeSEXP, SEXP unit_colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type id_col(id_colSEXP);
    Rcpp::traits::input_parameter< std::string >::type add_col(add_colSEXP);
    Rcpp::traits::input_parameter< std::string >::type third_col(third_colSEXP);
    Rcpp::traits::input_parameter< std::string >::type third_col_type(third_col_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type unit_col(unit_colSEXP);
    rcpp_result_gen = Rcpp::wrap(GBAT_1(x, id_col, add_col, third_col, third_col_type, unit_col));
    return rcpp_result_gen;
END_RCPP
}
// GBAT_2
DataFrame GBAT_2(DataFrame x, std::string id_col, std::string hse_num_col, std::string add_col, std::string third_col, std::string third_col_type, std::string unit_col);
RcppExport SEXP _rGBAT24B_GBAT_2(SEXP xSEXP, SEXP id_colSEXP, SEXP hse_num_colSEXP, SEXP add_colSEXP, SEXP third_colSEXP, SEXP third_col_typeSEXP, SEXP unit_colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type id_col(id_colSEXP);
    Rcpp::traits::input_parameter< std::string >::type hse_num_col(hse_num_colSEXP);
    Rcpp::traits::input_parameter< std::string >::type add_col(add_colSEXP);
    Rcpp::traits::input_parameter< std::string >::type third_col(third_colSEXP);
    Rcpp::traits::input_parameter< std::string >::type third_col_type(third_col_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type unit_col(unit_colSEXP);
    rcpp_result_gen = Rcpp::wrap(GBAT_2(x, id_col, hse_num_col, add_col, third_col, third_col_type, unit_col));
    return rcpp_result_gen;
END_RCPP
}
// GBAT_3
DataFrame GBAT_3(DataFrame x, std::string id_col, std::string street_name1, std::string street_name2, std::string boro_code1, std::string boro_code2, std::string compass_dir);
RcppExport SEXP _rGBAT24B_GBAT_3(SEXP xSEXP, SEXP id_colSEXP, SEXP street_name1SEXP, SEXP street_name2SEXP, SEXP boro_code1SEXP, SEXP boro_code2SEXP, SEXP compass_dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type id_col(id_colSEXP);
    Rcpp::traits::input_parameter< std::string >::type street_name1(street_name1SEXP);
    Rcpp::traits::input_parameter< std::string >::type street_name2(street_name2SEXP);
    Rcpp::traits::input_parameter< std::string >::type boro_code1(boro_code1SEXP);
    Rcpp::traits::input_parameter< std::string >::type boro_code2(boro_code2SEXP);
    Rcpp::traits::input_parameter< std::string >::type compass_dir(compass_dirSEXP);
    rcpp_result_gen = Rcpp::wrap(GBAT_3(x, id_col, street_name1, street_name2, boro_code1, boro_code2, compass_dir));
    return rcpp_result_gen;
END_RCPP
}
// GBAT_BL
DataFrame GBAT_BL(DataFrame x, std::string id_col, std::string bbl_col);
RcppExport SEXP _rGBAT24B_GBAT_BL(SEXP xSEXP, SEXP id_colSEXP, SEXP bbl_colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type id_col(id_colSEXP);
    Rcpp::traits::input_parameter< std::string >::type bbl_col(bbl_colSEXP);
    rcpp_result_gen = Rcpp::wrap(GBAT_BL(x, id_col, bbl_col));
    return rcpp_result_gen;
END_RCPP
}
// GBAT_BN
DataFrame GBAT_BN(DataFrame x, std::string id_col, std::string bin_col);
RcppExport SEXP _rGBAT24B_GBAT_BN(SEXP xSEXP, SEXP id_colSEXP, SEXP bin_colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type id_col(id_colSEXP);
    Rcpp::traits::input_parameter< std::string >::type bin_col(bin_colSEXP);
    rcpp_result_gen = Rcpp::wrap(GBAT_BN(x, id_col, bin_col));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rGBAT24B_HR", (DL_FUNC) &_rGBAT24B_HR, 0},
    {"_rGBAT24B_GBAT_1", (DL_FUNC) &_rGBAT24B_GBAT_1, 6},
    {"_rGBAT24B_GBAT_2", (DL_FUNC) &_rGBAT24B_GBAT_2, 7},
    {"_rGBAT24B_GBAT_3", (DL_FUNC) &_rGBAT24B_GBAT_3, 7},
    {"_rGBAT24B_GBAT_BL", (DL_FUNC) &_rGBAT24B_GBAT_BL, 3},
    {"_rGBAT24B_GBAT_BN", (DL_FUNC) &_rGBAT24B_GBAT_BN, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_rGBAT24B(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
